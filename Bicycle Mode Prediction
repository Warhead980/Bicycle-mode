import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
import numpy as np

path = r"F:\IIT KGP\II Semester\UI\Assignment\data.csv"
df = pd.read_csv(path)
print(df.head(10))

# deleting extra rows and columns
df.drop(df.columns[13:51], axis=1, inplace=True, errors='coerce')
df.drop(df.index[70:590], axis=0, inplace=True, errors="coerce")

# ----------------renaming columns----------------
df.columns = ['Age',
              'Gender',
              'Education',
              'Income',
              "Occupation",
              "Priv_Vehicle",
              "HH_Size",
              "Travel Time",
              "Type",
              "Scenario_1",
              "Scenario_2",
              "Scenario_3",
              "Scenario_4"]

# ----------------check the number of NaN values in each column----------------
print("Original NaN Value")
print(df[['Age',
          'Gender',
          'Education',
          'Income',
          "Occupation",
          "Priv_Vehicle",
          "HH_Size",
          "Travel Time",
          "Type",
          "Scenario_1",
          "Scenario_2",
          "Scenario_3",
          "Scenario_4"]].isnull().sum())

print(df.dtypes)

# ----------------conversion of string datatype----------------
df = df.replace(to_replace={'Female': 0, 'Male': 1})

df = df.replace(to_replace={"secondary": 0,
                            "higher secondary": 1,
                            "graduate & above": 2,
                            })

df = df.replace(to_replace={"<6,000": 0,
                            "6,000- 10,000": 1,
                            "10,000- 20,000": 2,
                            "20,000- 50,000": 3,
                            "2,00,000- 5,00,000": 4,
                            ">5,00,000": 5,
                            })

df = df.replace(to_replace={"unemployed": 0,
                            'Student': 1,
                            "private employee": 2,
                            "govt. employee": 3,
                            "employed for wages": 4,
                            "self employed": 5
                            })

df = df.replace(to_replace={'Yes': 1, 'No': 0})
df = df.replace(to_replace={'type 1': 1})

# ----------------data filling----------------
df["Gender"].fillna(df["Gender"].mean(), inplace=True)
df["Education"].fillna(df["Education"].mean(), inplace=True)
df["Income"].fillna(df["Income"].mean(), inplace=True)
df["Occupation"].fillna(df["Occupation"].mean(), inplace=True)
df["Priv_Vehicle"].fillna(df["Priv_Vehicle"].mean(), inplace=True)
df["HH_Size"].fillna(df["HH_Size"].mean(), inplace=True)
df["Travel Time"].fillna(df["Travel Time"].mean(), inplace=True)

df["Scenario_1"].fillna(df["Scenario_1"].mean(), inplace=True)
df["Scenario_1"] = df["Scenario_1"].round(decimals=0)
df["Scenario_2"].fillna(df["Scenario_2"].mean(), inplace=True)
df["Scenario_2"] = df["Scenario_2"].round(decimals=0)
df["Scenario_3"].fillna(df["Scenario_3"].mean(), inplace=True)
df["Scenario_3"] = df["Scenario_3"].round(decimals=0)
df["Scenario_4"].fillna(df["Scenario_4"].mean(), inplace=True)
df["Scenario_4"] = df["Scenario_4"].round(decimals=0)

df['Predict'] = df.loc[:, ["Scenario_1", "Scenario_2", "Scenario_3", "Scenario_4"]].sum(axis=1)

scaler = MinMaxScaler()
df[["Predict"]] = scaler.fit_transform(df[["Predict"]])
df["Predict"] = df["Predict"].round(decimals=0)
print(df.head(10))

# ----------------SKLEARN----------------
from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import classification_report

feature_cols = ['Age',
                'Gender',
                'Education',
                'Income',
                "Occupation",
                "Priv_Vehicle",
                "HH_Size",
                "Travel Time",
                "Type",
                "Scenario_1",
                "Scenario_2",
                "Scenario_3",
                "Scenario_4"]

X = df[feature_cols]  # Features
Y = df.Predict  # Target variable

# ----------------MODEL TRAINING/TESTING----------------
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=0)

model = tree.DecisionTreeClassifier()

model = model.fit(X_train, y_train)

y_predicted = model.predict(X_test)
print("Accuracy:", metrics.accuracy_score(y_test, y_predicted))
print("Precision: ")

# precision=TP/TP+FP
# recall=TP/TP+FN

micro_precision = precision_score(y_predicted, y_test, average='micro')
print('Micro-averaged precision score: {0:0.2f}'.format(
    micro_precision))

macro_precision = precision_score(y_predicted, y_test, average='macro')
print('Macro-averaged precision score: {0:0.2f}'.format(
    macro_precision))

per_class_precision = precision_score(y_predicted, y_test, average=None)
print('Per-class precision score:', per_class_precision)

recall = recall_score(y_test, y_predicted, average=None)
print("Recall scrore: ", recall)

cnf_matrix = confusion_matrix(y_test, y_predicted)
print('Confusion matrix: \n', cnf_matrix)

clas_report = classification_report(y_test, y_predicted)
print("Classification report: \n", clas_report)

import seaborn as sns


def cnf_mtx():
    class_names = [0, 1]  # name  of classes
    fig, ax = plt.subplots()
    tick_marks = np.arange(len(class_names))
    plt.xticks(tick_marks, class_names)
    plt.yticks(tick_marks, class_names)

    # create heatmap
    sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="PuBu", fmt='g')
    # colors: https://matplotlib.org/stable/tutorials/colors/colormaps.html
    ax.xaxis.set_label_position("top")
    plt.tight_layout()
    plt.title('Confusion matrix')
    plt.ylabel('Actual label')
    plt.xlabel('Predicted label')
    plt.show()

# cnf_mtx()
